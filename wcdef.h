#ifndef _WIN_CERT_DEF_
#define _WIN_CERT_DEF_

#if !defined(WINTRUST_H) && !defined(_INTERNALS_WINDOWS_NT_TYPES_H_)
#include <pshpack1.h>
typedef struct _WIN_CERTIFICATE {
    DWORD       dwLength;
    WORD        wRevision;
    WORD        wCertificateType;
    BYTE        bCertificate[ANYSIZE_ARRAY];
} WIN_CERTIFICATE, * LPWIN_CERTIFICATE;
#include <poppack.h>

#define WIN_CERT_REVISION_1_0               (0x0100)
#define WIN_CERT_REVISION_2_0               (0x0200)

#define WIN_CERT_TYPE_X509                  (0x0001)   // bCertificate contains an X.509 Certificate
#define WIN_CERT_TYPE_PKCS_SIGNED_DATA      (0x0002)   // bCertificate contains a PKCS SignedData structure
#define WIN_CERT_TYPE_RESERVED_1            (0x0003)   // Reserved
#define WIN_CERT_TYPE_TS_STACK_SIGNED       (0x0004)   // Terminal Server Protocol Stack Certificate signing
#endif // !defined(WINTRUST_H) && !defined(_INTERNALS_WINDOWS_NT_TYPES_H_)

//
// ASN1 DER Tags Classes
//
#define ASN1_DER_CLASS_UNIVERSAL        (0x00)
#define ASN1_DER_CLASS_APPLICATION      (0x40)
#define ASN1_DER_CLASS_CONTEXT_DEFINED  (0x80)
#define ASN1_DER_CLASS_PRIVATE          (0xC0)

#define TAG_TO_CLASS(tag) ((UCHAR)(tag) & 0xC0)

//
// ASN1 DER Forms
//
#define ASN1_DER_FORM_PRIMITIVE         (0x00)
#define ASN1_DER_FORM_CONSTRUCTED       (0x20)

#define TAG_TO_FORM(tag) ((UCHAR)(tag) & 0x20)

#define DEFTAG(class, form, x) \
    ((class) | (form) | (x))

typedef enum _ASN1_TAG {
    ASN1_TAG_RESERVED0 = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 0),
    ASN1_TAG_BOOLEAN = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 1),
    ASN1_TAG_INTEGER = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 2),
    ASN1_TAG_BITSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 3),
    ASN1_TAG_OCTETSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 4),
    ASN1_TAG_NULL = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 5),
    ASN1_TAG_OID = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 6),
    ASN1_TAG_OBJDESCRIPTOR = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 7),
    ASN1_TAG_EXTERNAL = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 8),
    ASN1_TAG_REAL = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 9),
    ASN1_TAG_ENUMERATED = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 10),
    ASN1_TAG_EMBEDDEDPDV = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 11),
    ASN1_TAG_UTF8STRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 12),
    ASN1_TAG_RELATIVEOID = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 13),
    ASN1_TAG_TIME = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 14),
    ASN1_TAG_RESERVED15 = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 15),
    ASN1_TAG_SEQUENCE = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_CONSTRUCTED, 16),
    ASN1_TAG_SEQUENCE_OF = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_CONSTRUCTED, 16),
    ASN1_TAG_SET = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_CONSTRUCTED, 17),
    ASN1_TAG_SET_OF = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_CONSTRUCTED, 17),
    ASN1_TAG_NUMERICSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 18),
    ASN1_TAG_PRINTABLESTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 19),
    ASN1_TAG_TELETEXSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 20),
    ASN1_TAG_T61STRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 20),
    ASN1_TAG_VIDEOTEXSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 21),
    ASN1_TAG_IA5STRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 22),
    ASN1_TAG_UTCTIME = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 23),
    ASN1_TAG_GENERALIZEDTIME = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 24),
    ASN1_TAG_GRAPHICSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 25),
    ASN1_TAG_VISIBLESTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 26),
    ASN1_TAG_GENERALSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 27),
    ASN1_TAG_UNIVERSALSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 28),
    ASN1_TAG_CHARACTERSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 29),
    ASN1_TAG_BMPSTRING = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 30),
    ASN1_TAG_DATE = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 31),
    ASN1_TAG_TIMEOFDAY = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 32),
    ASN1_TAG_DATETIME = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 33),
    ASN1_TAG_DURATION = DEFTAG(ASN1_DER_CLASS_UNIVERSAL, ASN1_DER_FORM_PRIMITIVE, 34),
} ASN1_TAG, * PASN1_TAG;

typedef struct _ASN1_VALUE_DECRIPTOR {
    WORD Level;
    union {

#define ADF_OPTIONAL    (0x00000001L)

        WORD Flags;

        struct {
            WORD Optional : 1;
            WORD ReservedFlags : 15;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    ASN1_TAG Tag;
    ULONG ValueIndex;
} ASN1_VALUE_DECRIPTOR, * PASN1_VALUE_DECRIPTOR;

typedef struct _ASN1_VALUE {
    BLOB Raw;
    ASN1_TAG Tag;
    BLOB Data;
} ASN1_VALUE, * PASN1_VALUE;

typedef enum {
    X520_CommonName = 0,
    X520_Surname,
    X520_SerialNumber,
    X520_CountryName,
    X520_LocalityName,
    X520_ProvinceName,
    X520_StreetAddress,
    X520_OrganizationName,
    X520_OrganizationalUnitName,
    X520_Title,
    X520_Description,
    X520_BusinessCatagory,
    X520_GivenName,
    X520_Initials,
    X520_GenerationQualifier,
    X520_DistinguishedName,
    X520_Pseudonym,
    X520_Max
} X520_ATTR;

typedef enum {
    ChainEnd = 0,
    ChainIntermediate,
    ChainRoot,
    ChainMax
} CERT_CHAIN_HIERARCHY;

typedef struct _WIN_CERT_X520 {
    ASN1_VALUE Attributes[X520_Max];
} WIN_CERT_X520, * PWIN_CERT_X520;

typedef union _KEY_USAGE_BITS {

#define KEY_USAGE_DIGITAL_SIGNATURE     (0x0080)
#define KEY_USAGE_NON_REPUDIATION       (0x0040)
#define KEY_USAGE_CONTENT_COMMITMENT    (0x0040)
#define KEY_USAGE_KEY_ENCIPHERMENT      (0x0020)
#define KEY_USAGE_DATA_ENCIPHERMENT     (0x0010)
#define KEY_USAGE_KEY_AGREEMENT         (0x0008)
#define KEY_USAGE_KEY_CERT_SIGN         (0x0004)
#define KEY_USAGE_CRL_SIGN              (0x0002)
#define KEY_USAGE_ENCIPHER_ONLY         (0x0001)
#define KEY_USAGE_DECIPHER_ONLY         (0x8000)

    WORD Combined;
    struct {
        WORD EncipherOnly : 1;
        WORD CRLSign : 1;
        WORD KeyCertSign : 1;
        WORD KeyAgreement : 1;
        WORD DataEncipherment : 1;
        WORD KeyEncipherment : 1;
        WORD ContentCommitment : 1;
        WORD DigitalSignature : 1;
        WORD ReservedUsage : 7;
        WORD DecipherOnly : 1;
    } DUMMYSTRUCTNAME;
} KEY_USAGE_BITS, *PKEY_USAGE_BITS;

typedef struct _WIN_CERT_CHAIN_OPTIONS_1 {
    union {

#define WCHF_NO_LIFETIME_CHECK          (0x00000001L)
#define WCHF_NO_CRITICAL_EXT_CHECK      (0x00000002L)
#define WCHF_NO_BASIC_CONSTRAINTS_CHECK (0x00000004L)
#define WCHF_NO_KEY_USAGE_CHECK         (0x00000008L)

        ULONG Flags;

        struct {
            ULONG NoLifetimeCheck : 1;
            ULONG NoCriticalExtCheck : 1;
            ULONG NoBasicConstraintsCheck : 1;
            ULONG NoKeyUsageCheck : 1;
            ULONG ReservedFlags : 28;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    const WIN_CERT_X520* Issuer;
    const WIN_CERT_X520* Subject;
    LARGE_INTEGER Time;
    KEY_USAGE_BITS KeyUsage;
    ULONG ExtKeyUsageCount;
    PBLOB ExtKeyUsageList;
} WIN_CERT_CHAIN_OPTIONS_1, *PWIN_CERT_CHAIN_OPTIONS_1;
typedef WIN_CERT_CHAIN_OPTIONS_1 WIN_CERT_CHAIN_OPTIONS;
typedef WIN_CERT_CHAIN_OPTIONS* PWIN_CERT_CHAIN_OPTIONS;

typedef struct _WIN_CERT_OPTIONS_1 {
    DWORD Size;
    union {

#define WCOF_DISABLE_MD2                (0x00000001L)

        ULONG Flags;

        struct {
            ULONG DisableMD2 : 1;
            ULONG ReservedFlags : 31;
        } DUMMYSTRUCTNAME;
    } DUMMYUNIONNAME;
    WIN_CERT_CHAIN_OPTIONS_1 ChainOptions[ChainMax];
} WIN_CERT_OPTIONS_1, * PWIN_CERT_OPTIONS_1;

typedef WIN_CERT_OPTIONS_1 WIN_CERT_OPTIONS;
typedef WIN_CERT_OPTIONS* PWIN_CERT_OPTIONS;

#define DATA_TYPE_ANY               (0x00000000L)
#define DATA_TYPE_IMAGE             (0x00000001L)
#define DATA_TYPE_CERT_BASE64_HDR   (0x00000002L)
#define DATA_TYPE_CERT_BASE64       (0x00000003L)
#define DATA_TYPE_CERT_BINARY       (0x00000004L)
#define DATA_TYPE_CERT_ANY          (0x00000005L)

#define DATA_TYPE_STRICT            (0x20000000L)

#endif // _WIN_CERT_DEF_
